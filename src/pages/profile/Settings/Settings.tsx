import React, { useEffect, useState } from "react";
import styles from "./Settings.module.scss";
import { useSelector, useDispatch } from "react-redux";
import { RootState } from "../../../redux/store";
import { fetchUser } from "../../../redux/api/account/accountApi";
import axios from "axios";
import { updateUserProfile, updateUserAvatar } from "../../../redux/api/auth/authApi";
import { setUser } from "../../../redux/slices/auth/authSlice";
import { DJANGO_URL } from "../../../redux/api/baseApi";


const defaultAvatar = "/default/default-user.jfif";

const Settings = () => {
  const authUser = useSelector((state: RootState) => state.auth.user);
  const token = useSelector((state: RootState) => state.auth.token);
  const dispatch = useDispatch();

  const [formData, setFormData] = useState({
    first_name: "",
    last_name: "",
    email: "",
    age: "",
    city: "",
    profession: "",
    favorite_alcohol: "",
    hobby: "",
    extra_info: "",
    old_password: "",
    new_password: "",
    confirm_password: ""
  });

  const [avatar, setAvatar] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —é–∑–µ—Ä–∞ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –º–∞—É–Ω—Ç–µ
  useEffect(() => {
    const loadUser = async () => {
      if (!authUser?.id || !token) return;
      try {
        const userData = await fetchUser(authUser.id.toString());
        setFormData({
          ...formData,
          first_name: userData.first_name || "",
          last_name: userData.last_name || "",
          email: userData.email || "",
          age: userData.age?.toString() || "",
          city: userData.city || "",
          profession: userData.profession || "",
          favorite_alcohol: userData.favorite_alcohol || "",
          hobby: userData.hobby || "",
          extra_info: userData.extra_info || "",
          old_password: "",
          new_password: "",
          confirm_password: ""
        });
        setAvatar(userData.avatar || null);
        setLoading(false);
      } catch {
        setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.");
      }
    };
    loadUser();
    // üëá –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ‚Üí –≥—Ä—É–∑–∏–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
  }, []);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value
    }));
  };

  const handlePasswordChange = async () => {
    if (!formData.old_password || !formData.new_password || !formData.confirm_password) {
      setError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è.");
      return;
    }

    if (formData.new_password !== formData.confirm_password) {
      setError("–ù–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.");
      return;
    }

    try {
      await axios.post(
        `${DJANGO_URL}/api/change-password/`,
        {
          old_password: formData.old_password,
          new_password: formData.new_password,
        },
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      alert("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω");
      setFormData((prev) => ({
        ...prev,
        old_password: "",
        new_password: "",
        confirm_password: ""
      }));
      setError("");
    } catch {
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å.");
    }
  };

  const handleFieldUpdate = async (fieldName: string) => {
    if (!authUser?.id) return;

    const rawValue = formData[fieldName as keyof typeof formData];
    const value = fieldName === "age" ? parseInt(rawValue || "0", 10) : rawValue;

    try {
      const updatedUser = await updateUserProfile(authUser.id, { [fieldName]: value });

      // –û–±–Ω–æ–≤–ª—è–µ–º Redux store
      dispatch(setUser(updatedUser));

      setError("");
      alert("–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.");
    } catch {
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.");
    }
  };

  const handleAvatarChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      if (!authUser?.id) return;
      const formData = new FormData();
      formData.append("image", e.target.files[0]);
      try {
        const userData = await updateUserAvatar(authUser.id, formData);
        setAvatar(userData.image || null);

        // –û–±–Ω–æ–≤–ª—è–µ–º Redux store
        dispatch(setUser(userData));

        setError("");
        alert("–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.");
      } catch {
        setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞.");
      }
    }
  };

  if (loading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;

  return (
    <div className={styles.settingsContainer}>
      <h1>–ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h1>
      {error && <p style={{ color: "red" }}>{error}</p>}

      {/* –ê–≤–∞—Ç–∞—Ä */}
      <div className={styles.avatarBlock}>
        <img
          src={avatar ? avatar : defaultAvatar}
          alt="avatar"
          className={styles.avatar}
          style={{ width: 80, height: 80, borderRadius: "50%", objectFit: "cover", marginBottom: 10 }}
        />
        <input type="file" accept="image/*" onChange={handleAvatarChange} />
      </div>

      {/* –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è */}
      <div className={styles.section}>
        {Object.entries({
          first_name: "–ò–º—è",
          last_name: "–§–∞–º–∏–ª–∏—è",
          email: "Email"
        }).map(([key, label]) => (
          <div key={key} className={styles.inputGroup}>
            <label>{label}</label>
            <input type="text" name={key} value={formData[key as keyof typeof formData]} onChange={handleChange} />
            <button onClick={() => handleFieldUpdate(key)}>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
          </div>
        ))}
      </div>

      <h2>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>

      <div className={styles.inputGroup}>
        <label>–í–æ–∑—Ä–∞—Å—Ç</label>
        <select name="age" value={formData.age} onChange={handleChange}>
          <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç</option>
          {Array.from({ length: 83 }, (_, i) => i + 18).map((age) => (
            <option key={age} value={age.toString()}>{age}</option>
          ))}
        </select>
        <button onClick={() => handleFieldUpdate("age")}>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
      </div>

      <div className={styles.inputGroup}>
        <label>–ì–æ—Ä–æ–¥</label>
        <select name="city" value={formData.city} onChange={handleChange}>
          <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥</option>
          {/* —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ */}
          <option value="kyiv">–ö–∏–µ–≤</option>
          <option value="kharkiv">–•–∞—Ä—å–∫–æ–≤</option>
          <option value="odesa">–û–¥–µ—Å—Å–∞</option>
          <option value="dnipro">–î–Ω–µ–ø—Ä</option>
          <option value="lviv">–õ—å–≤–æ–≤</option>
          <option value="zaporizhzhia">–ó–∞–ø–æ—Ä–æ–∂—å–µ</option>
          <option value="vinnitsa">–í–∏–Ω–Ω–∏—Ü–∞</option>
          <option value="mykolaiv">–ù–∏–∫–æ–ª–∞–µ–≤</option>
          <option value="cherkasy">–ß–µ—Ä–∫–∞—Å—Å—ã</option>
          <option value="chernihiv">–ß–µ—Ä–Ω–∏–≥–æ–≤</option>
          <option value="chernivtsi">–ß–µ—Ä–Ω–æ–≤—Ü—ã</option>
          <option value="poltava">–ü–æ–ª—Ç–∞–≤–∞</option>
          <option value="kherson">–•–µ—Ä—Å–æ–Ω</option>
          <option value="sumy">–°—É–º—ã</option>
          <option value="zhytomyr">–ñ–∏—Ç–æ–º–∏—Ä</option>
          <option value="ivano_frankivsk">–ò–≤–∞–Ω–æ-—Ñ—Ä–∞–Ω–∫–æ–≤—Å–∫</option>
          <option value="lutsk">–õ—É—Ü–∫</option>
          <option value="ternopil">–¢–µ—Ä–Ω–æ–ø–æ–ª—å</option>
          <option value="uzhhorod">–£–∂–≥–æ—Ä–æ–¥</option>
          <option value="kropyvnytskyi">–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü–∫–∏–π</option>
          <option value="rivno">–†–æ–≤–Ω–æ</option>
          <option value="mariupol">–ú–∞—Ä–∏—É–ø–æ–ª—å</option>
          <option value="sevastopol">–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å</option>
          <option value="simferopol">–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å</option>
        </select>
        <button onClick={() => handleFieldUpdate("city")}>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
      </div>

      {Object.entries({
        profession: "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è",
        favorite_alcohol: "–õ—é–±–∏–º—ã–π –∞–ª–∫–æ–≥–æ–ª—å",
        hobby: "–•–æ–±–±–∏",
        extra_info: "–ü–æ–±–æ–ª—å—à–µ –æ —Å–µ–±–µ"
      }).map(([key, label]) => (
        <div key={key} className={styles.inputGroup}>
          <label>{label}</label>
          {key === "extra_info" ? (
            <textarea name={key} value={formData[key as keyof typeof formData]} onChange={handleChange} />
          ) : (
            <input type="text" name={key} value={formData[key as keyof typeof formData]} onChange={handleChange} />
          )}
          <button onClick={() => handleFieldUpdate(key)}>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
        </div>
      ))}

      <h2>–ü–∞—Ä–æ–ª—å</h2>
      <p>–î–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª–∏:</p>

      <div className={styles.inputGroup}>
        <label>–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å</label>
        <input type="password" name="old_password" value={formData.old_password} onChange={handleChange} />
      </div>

      <div className={styles.inputGroup}>
        <label>–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</label>
        <input type="password" name="new_password" value={formData.new_password} onChange={handleChange} />
      </div>

      <div className={styles.inputGroup}>
        <label>–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —Å–Ω–æ–≤–∞</label>
        <input type="password" name="confirm_password" value={formData.confirm_password} onChange={handleChange} />
      </div>

      <button className={styles.submitButton} onClick={handlePasswordChange}>
        –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
      </button>
    </div>
  );
};

export default Settings;










// import React, { useEffect, useState } from "react";
// import styles from "./Settings.module.scss";
// import { useSelector } from "react-redux";
// import { RootState } from "../../../redux/store";
// import { fetchUser } from "../../../redux/api/account/accountApi";
// import axios from "axios";
// import { updateUserProfile, updateUserAvatar } from "../../../redux/api/auth/authApi";

// // –î–æ–±–∞–≤—å defaultAvatar, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø—Ä–µ–≤—å—é
// const defaultAvatar = "/images/default-avatar.png";

// const Settings = () => {
//   const authUser = useSelector((state: RootState) => state.auth.user);
//   const token = useSelector((state: RootState) => state.auth.token);

//   const [formData, setFormData] = useState({
//     first_name: "",
//     last_name: "",
//     email: "",
//     age: "",
//     city: "",
//     profession: "",
//     favorite_alcohol: "",
//     hobby: "",
//     extra_info: "",
//     old_password: "",
//     new_password: "",
//     confirm_password: ""
//   });

//   // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
//   const [avatar, setAvatar] = useState<string | null>(null);
//   const [avatarFile, setAvatarFile] = useState<File | null>(null);

//   const [loading, setLoading] = useState(true);
//   const [error, setError] = useState("");

//   // –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —é–∑–µ—Ä–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
//   useEffect(() => {
//     const loadUser = async () => {
//       if (!authUser?.id || !token) return;
//       try {
//         const userData = await fetchUser(authUser.id.toString());
//         setFormData((prev) => ({
//           ...prev,
//           first_name: userData.first_name || "",
//           last_name: userData.last_name || "",
//           email: userData.email || "",
//           age: userData.age?.toString() || "",
//           city: userData.city || "",
//           profession: userData.profession || "",
//           favorite_alcohol: userData.favorite_alcohol || "",
//           hobby: userData.hobby || "",
//           extra_info: userData.extra_info || ""
//         }));
//         setAvatar(userData.avatar || null);
//         setLoading(false);
//       } catch (err) {
//         setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.");
//       }
//     };
//     loadUser();
//   }, [authUser, token]);

//   // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
//   const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
//     const { name, value } = e.target;
//     setFormData((prev) => ({
//       ...prev,
//       [name]: value
//     }));
//   };

//   // –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
//   const handlePasswordChange = async () => {
//     if (!formData.old_password || !formData.new_password || !formData.confirm_password) {
//       setError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è.");
//       return;
//     }

//     if (formData.new_password !== formData.confirm_password) {
//       setError("–ù–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.");
//       return;
//     }

//     try {
//       await axios.post(
//         `http://127.0.0.1:8000/api/change-password/`,
//         {
//           old_password: formData.old_password,
//           new_password: formData.new_password,
//         },
//         {
//           headers: {
//             Authorization: `Bearer ${token}`,
//           },
//         }
//       );
//       alert("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω");
//       setFormData({ ...formData, old_password: "", new_password: "", confirm_password: "" });
//       setError("");
//     } catch {
//       setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å.");
//     }
//   };

//   // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π (–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞)
//   const handleFieldUpdate = async (fieldName: string) => {
//     if (!authUser?.id) return;

//     const rawValue = formData[fieldName as keyof typeof formData];
//     const value = fieldName === "age" ? parseInt(rawValue || "0", 10) : rawValue;

//     try {
//       await updateUserProfile(authUser.id, { [fieldName]: value });
//       // –ü–æ—Å–ª–µ –∞–ø–¥–µ–π—Ç–∞ —Å—Ä–∞–∑—É –ø–æ–¥–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ!
//       const userData = await fetchUser(authUser.id.toString());
//       setFormData((prev) => ({
//         ...prev,
//         first_name: userData.first_name || "",
//         last_name: userData.last_name || "",
//         email: userData.email || "",
//         age: userData.age?.toString() || "",
//         city: userData.city || "",
//         profession: userData.profession || "",
//         favorite_alcohol: userData.favorite_alcohol || "",
//         hobby: userData.hobby || "",
//         extra_info: userData.extra_info || ""
//       }));
//       setAvatar(userData.avatar || null);
//       setError("");
//       alert("–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.");
//     } catch (error) {
//       setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.");
//     }
//   };

//   // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
//   const handleAvatarChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
//     if (e.target.files && e.target.files[0]) {
//       setAvatarFile(e.target.files[0]);
//       // –î–ª—è –ø—Ä–µ–≤—å—é
//       setAvatar(URL.createObjectURL(e.target.files[0]));

//       if (!authUser?.id) return;
//       const formData = new FormData();
//       formData.append("image", e.target.files[0]);
//       try {
//         await updateUserAvatar(authUser.id, formData);
//         // –ü–æ—Å–ª–µ –∞–ø–¥–µ–π—Ç–∞ ‚Äî —Ñ–µ—Ç—á–∏–º —é–∑–µ—Ä–∞
//         const userData = await fetchUser(authUser.id.toString());
//         setAvatar(userData.avatar || null);
//         setError("");
//         alert("–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.");
//       } catch (error) {
//         setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞.");
//       }
//     }
//   };

//   if (loading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;

//   return (
//     <div className={styles.settingsContainer}>
//       <h1>–ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h1>

//       {error && <p style={{ color: "red" }}>{error}</p>}

//       {/* === –ê–í–ê–¢–ê–†–ö–ê === */}
//       <div className={styles.avatarBlock}>
//         <img
//           src={avatar ? avatar : defaultAvatar}
//           alt="avatar"
//           className={styles.avatar}
//           style={{ width: 80, height: 80, borderRadius: "50%", objectFit: "cover", marginBottom: 10 }}
//         />
//         <input type="file" accept="image/*" onChange={handleAvatarChange} />
//       </div>

//       <div className={styles.section}>
//         {Object.entries({
//           first_name: "–ò–º—è",
//           last_name: "–§–∞–º–∏–ª–∏—è",
//           email: "Email"
//         }).map(([key, label]) => (
//           <div key={key} className={styles.inputGroup}>
//             <label>{label}</label>
//             <input type="text" name={key} value={formData[key as keyof typeof formData]} onChange={handleChange} />
//             <button onClick={() => handleFieldUpdate(key)}>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
//           </div>
//         ))}
//       </div>

//       <h2>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>

//       <div className={styles.inputGroup}>
//         <label>–í–æ–∑—Ä–∞—Å—Ç</label>
//         <select name="age" value={formData.age} onChange={handleChange}>
//           <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç</option>
//           {Array.from({ length: 83 }, (_, i) => i + 18).map((age) => (
//             <option key={age} value={age.toString()}>{age}</option>
//           ))}
//         </select>
//         <button onClick={() => handleFieldUpdate("age")}>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
//       </div>

//       <div className={styles.inputGroup}>
//         <label>–ì–æ—Ä–æ–¥</label>
//         <select name="city" value={formData.city} onChange={handleChange}>
//           <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥</option>
//           {[{ value: "kyiv", label: "–ö–∏–µ–≤" }, { value: "kharkiv", label: "–•–∞—Ä—å–∫–æ–≤" }, { value: "odesa", label: "–û–¥–µ—Å—Å–∞" },
//             { value: "dnipro", label: "–î–Ω–µ–ø—Ä" }, { value: "lviv", label: "–õ—å–≤–æ–≤" }, { value: "zaporizhzhia", label: "–ó–∞–ø–æ—Ä–æ–∂—å–µ" },
//             { value: "vinnitsa", label: "–í–∏–Ω–Ω–∏—Ü–∞" }, { value: "mykolaiv", label: "–ù–∏–∫–æ–ª–∞–µ–≤" }, { value: "cherkasy", label: "–ß–µ—Ä–∫–∞—Å—Å—ã" },
//             { value: "chernihiv", label: "–ß–µ—Ä–Ω–∏–≥–æ–≤" }, { value: "chernivtsi", label: "–ß–µ—Ä–Ω–æ–≤—Ü—ã" }, { value: "poltava", label: "–ü–æ–ª—Ç–∞–≤–∞" },
//             { value: "kherson", label: "–•–µ—Ä—Å–æ–Ω" }, { value: "sumy", label: "–°—É–º—ã" }, { value: "zhytomyr", label: "–ñ–∏—Ç–æ–º–∏—Ä" },
//             { value: "ivano_frankivsk", label: "–ò–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫–æ–≤—Å–∫" }, { value: "lutsk", label: "–õ—É—Ü–∫" }, { value: "ternopil", label: "–¢–µ—Ä–Ω–æ–ø–æ–ª—å" },
//             { value: "uzhhorod", label: "–£–∂–≥–æ—Ä–æ–¥" }, { value: "kropyvnytskyi", label: "–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü–∫–∏–π" }, { value: "rivno", label: "–†–æ–≤–Ω–æ" },
//             { value: "mariupol", label: "–ú–∞—Ä–∏—É–ø–æ–ª—å" }, { value: "sevastopol", label: "–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å" }, { value: "simferopol", label: "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å" }]
//             .map((city) => (
//               <option key={city.value} value={city.value}>{city.label}</option>
//             ))}
//         </select>
//         <button onClick={() => handleFieldUpdate("city")}>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
//       </div>

//       {Object.entries({
//         profession: "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è",
//         favorite_alcohol: "–õ—é–±–∏–º—ã–π –∞–ª–∫–æ–≥–æ–ª—å",
//         hobby: "–•–æ–±–±–∏",
//         extra_info: "–ü–æ–±–æ–ª—å—à–µ –æ —Å–µ–±–µ"
//       }).map(([key, label]) => (
//         <div key={key} className={styles.inputGroup}>
//           <label>{label}</label>
//           {key === "extra_info" ? (
//             <textarea name={key} value={formData[key as keyof typeof formData]} onChange={handleChange} />
//           ) : (
//             <input type="text" name={key} value={formData[key as keyof typeof formData]} onChange={handleChange} />
//           )}
//           <button onClick={() => handleFieldUpdate(key)}>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
//         </div>
//       ))}

//       <h2>–ü–∞—Ä–æ–ª—å</h2>
//       <p>–î–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª–∏:</p>

//       <div className={styles.inputGroup}>
//         <label>–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å</label>
//         <input type="password" name="old_password" value={formData.old_password} onChange={handleChange} />
//         <a href="#">–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?</a>
//       </div>

//       <div className={styles.inputGroup}>
//         <label>–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</label>
//         <input type="password" name="new_password" value={formData.new_password} onChange={handleChange} />
//       </div>

//       <div className={styles.inputGroup}>
//         <label>–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —Å–Ω–æ–≤–∞</label>
//         <input type="password" name="confirm_password" value={formData.confirm_password} onChange={handleChange} />
//       </div>

//       <button className={styles.submitButton} onClick={handlePasswordChange}>
//         –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
//       </button>
//     </div>
//   );
// };

// export default Settings;










