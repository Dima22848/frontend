import { useParams, useNavigate } from "react-router-dom";
import { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { fetchReviewsAsync, deleteReviewAsync } from "../../../redux/slices/main/reviewsSlice";
import { loadAlcoholItems, AlcoholItemData } from "../../../redux/slices/main/alcoholSlice";
import { addItemToBasket } from "../../../redux/slices/main/basketSlice";
import { RootState, AppDispatch } from "../../../redux/store";
import styles from "./AlcoholItem.module.scss";


// –ú–∞–ø–ø–∏–Ω–≥ content_type —Å—Ç—Ä–æ–≥–æ –ø–æ –ë–î (–ø—Ä–æ–≤–µ—Ä—å —Ü–∏—Ñ—Ä—ã –≤ –∞–¥–º–∏–Ω–∫–µ)
const contentTypeMapping: Record<string, number> = {
  pivo: 13,
  cognak: 14,
  vino: 17,
  vodka: 18,
};

const hiddenFields = [
  "id", "name", "price", "image", "alcoholtype", "slug", "reviews_count", "created_at", "field_verbose_names",
];

const AlcoholItem = () => {
  const { type, slug } = useParams<{ type: string; slug: string }>();
  const navigate = useNavigate();
  const dispatch = useDispatch<AppDispatch>();
  const alcoholItems = useSelector((state: RootState) => state.alcohol.items) as AlcoholItemData[];
  const reviews = useSelector((state: RootState) => state.reviews.reviews);
  const currentUser = useSelector((state: RootState) => state.auth.user);

  const alcohol = alcoholItems.find((item) => item.slug === slug);
  const content_type = type ? contentTypeMapping[type] || 0 : 0;


  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä –µ—Å–ª–∏ –æ–±–Ω–æ–≤–∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É
  useEffect(() => {
    if (type && (!alcoholItems.length || !alcohol)) {
      dispatch(loadAlcoholItems(type));
    }
  }, [type, dispatch, alcoholItems.length, alcohol, slug]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–∑—ã–≤—ã
  useEffect(() => {
    if (alcohol && type) {
      dispatch(fetchReviewsAsync({ content_type, object_id: alcohol.id }));
    }
  }, [alcohol, type, content_type, dispatch]);

  // –£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤
  const handleDelete = (id: number) => {
    dispatch(deleteReviewAsync({ reviewId: id, content_type, object_id: alcohol!.id }));
  };

  // === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É (—Ç–æ–ª—å–∫–æ redux/localStorage) ===
  const handleAddToBasket = () => {
    if (!alcohol || !type) return;
    dispatch(addItemToBasket({
      content_type: contentTypeMapping[type],
      object_id: alcohol.id,
      quantity: 1,
      alcohol: {
        id: alcohol.id,
        name: alcohol.name,
        price: alcohol.price,
        image: alcohol.image,
      }
    }));
  };


  if (!alcohol) return <p>–ê–ª–∫–æ–≥–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</p>;

  const renderStars = (rating: number) => (
    <div className={styles.reviewRating}>
      {[...Array(5)].map((_, i) => (
        <span key={i} className={i < rating ? styles.starFilled : styles.starEmpty}>‚òÖ</span>
      ))}
    </div>
  );

  const fieldVerbose = alcohol.field_verbose_names || {};
  const characteristics = Object.entries(alcohol)
    .filter(([key, value]) =>
      !hiddenFields.includes(key) &&
      fieldVerbose[key] &&
      value !== null &&
      value !== undefined &&
      value !== ""
    );

  const latestReviews = reviews.slice(-4).reverse();

  return (
    <div className={styles.container}>
      <button className={styles.backButton} onClick={() => navigate(-1)}>
        ‚Üê –ù–∞–∑–∞–¥
      </button>
      <div className={styles.content}>
        <img src={alcohol.image} alt={alcohol.name} className={styles.image} />
        <div className={styles.details}>
          <h1>{alcohol.name}</h1>
          <p className={styles.price}>{alcohol.price} –≥—Ä–Ω</p>
          {alcohol.volume && <p className={styles.volume}>–û–±—ä–µ–º: {alcohol.volume}</p>}
          {/* === –ö–Ω–æ–ø–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã === */}
          <button className={styles.addToCart} onClick={handleAddToBasket}>
            –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
          </button>
        </div>
      </div>
      <h2>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h2>
      <div className={styles.characteristics}>
        {characteristics.map(([key, value]) => (
          <p key={key}>
            <strong>{fieldVerbose[key]}:</strong> {value}
          </p>
        ))}
      </div>
      <h2>–û—Ç–∑—ã–≤—ã</h2>
      <div className={styles.reviews}>
        {latestReviews.map((review) => (
          <div key={review.id} className={styles.review}>
            <div className={styles.userWithRating}>
              {typeof review.author === "object" && review.author !== null && "avatar" in review.author && review.author.avatar ? (
                <img
                  src={review.author.avatar}
                  alt={review.author.nickname}
                  className={styles.avatar}
                />
              ) : (
                <span className={styles.userIcon}>üë§</span>
              )}
              <div>
                <p className={styles.userName}>
                  {typeof review.author === "object" && review.author !== null && "nickname" in review.author
                    ? review.author.nickname
                    : review.author}
                </p>
                {renderStars(review.rate)}
              </div>
              {currentUser && typeof review.author === "object" &&
                review.author.nickname === currentUser.nickname && (
                <button className={styles.deleteBtn} onClick={() => handleDelete(review.id)}>
                  –£–¥–∞–ª–∏—Ç—å
                </button>
              )}
            </div>
            <div className={styles.reviewContent}>
              <p className={styles.reviewText}>{review.text}</p>
              <p className={styles.reviewDate}>{new Date(review.created_at).toLocaleString()}</p>
            </div>
          </div>
        ))}
      </div>
      <div className={styles.reviewButtons}>
        <button onClick={() => navigate(
          `/${type}/${slug}/send-review`,
          { state: { alcohol, type } }
        )}>
          –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
        </button>
        <button onClick={() => navigate(`/${type}/${slug}/reviews`, { state: { content_type, object_id: alcohol.id } })}>–í—Å–µ –æ—Ç–∑—ã–≤—ã</button>
      </div>
    </div>
  );
};

export default AlcoholItem;








// import { useParams, useNavigate } from "react-router-dom";
// import { useEffect } from "react";
// import { useDispatch, useSelector } from "react-redux";
// import { fetchReviewsAsync, deleteReviewAsync } from "../../../redux/slices/main/reviewsSlice";
// import { loadAlcoholItems } from "../../../redux/slices/main/alcoholSlice";
// import { addItemToBasket } from "../../../redux/slices/main/basketSlice"; // üëà –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º!
// import { RootState, AppDispatch } from "../../../redux/store";
// import styles from "./AlcoholItem.module.scss";
// import { AlcoholItemData } from "../../../redux/slices/main/alcoholSlice";

// const contentTypeMapping: Record<string, number> = {
//   pivo: 13,
//   cognak: 14,
//   vino: 17,
//   vodka: 18,
// };

// const hiddenFields = [
//   "id", "name", "price", "image", "alcoholtype", "slug", "reviews_count", "created_at", "field_verbose_names",
// ];

// const AlcoholItem = () => {
//   const { type, slug } = useParams<{ type: string; slug: string }>();
//   const navigate = useNavigate();
//   const dispatch = useDispatch<AppDispatch>();
//   const alcoholItems = useSelector((state: RootState) => state.alcohol.items) as AlcoholItemData[];
//   const reviews = useSelector((state: RootState) => state.reviews.reviews);
//   const currentUser = useSelector((state: RootState) => state.auth.user);

//   const alcohol = alcoholItems.find((item) => item.slug === slug);
//   const content_type = type ? contentTypeMapping[type] || 0 : 0;

//   // –§–∏–∫—Å F5
//   useEffect(() => {
//     if (type && (!alcoholItems.length || !alcohol)) {
//       dispatch(loadAlcoholItems(type));
//     }
//   }, [type, dispatch, alcoholItems.length, alcohol, slug]);

//   // –ì—Ä—É–∑–∏–º –æ—Ç–∑—ã–≤—ã
//   useEffect(() => {
//     if (alcohol && type) {
//       const object_id = alcohol.id;
//       dispatch(fetchReviewsAsync({ content_type, object_id }));
//     }
//   }, [alcohol, type, content_type, dispatch]);

//   const handleDelete = (id: number) => {
//     dispatch(deleteReviewAsync({ reviewId: id, content_type, object_id: alcohol!.id }));
//   };

//   // === –î–û–ë–ê–í–õ–ï–ù–ò–ï –í –ö–û–†–ó–ò–ù–£ ===
//   const handleAddToBasket = () => {
//     if (!alcohol) return;
//     // –°–æ–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
//     dispatch(addItemToBasket({
//       content_type: contentTypeMapping[alcohol.type], // –Ω–∞–ø—Ä–∏–º–µ—Ä, 13 –¥–ª—è –ø–∏–≤–∞
//       object_id: alcohol.id,
//       quantity: 1,
//     }));
//   };

//   if (!alcohol) {
//     return <p>–ê–ª–∫–æ–≥–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</p>;
//   }

//   const renderStars = (rating: number) => (
//     <div className={styles.reviewRating}>
//       {[...Array(5)].map((_, i) => (
//         <span key={i} className={i < rating ? styles.starFilled : styles.starEmpty}>‚òÖ</span>
//       ))}
//     </div>
//   );

//   const fieldVerbose = alcohol.field_verbose_names || {};
//   const characteristics = Object.entries(alcohol)
//     .filter(([key, value]) =>
//       !hiddenFields.includes(key) &&
//       fieldVerbose[key] &&
//       value !== null &&
//       value !== undefined &&
//       value !== ""
//     );

//   // –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∏—Ö (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—Ä—Ö—É)
//   const latestReviews = reviews.slice(-4).reverse();

//   return (
//     <div className={styles.container}>
//       <button className={styles.backButton} onClick={() => navigate(-1)}>
//         ‚Üê –ù–∞–∑–∞–¥
//       </button>
//       <div className={styles.content}>
//         <img src={alcohol.image} alt={alcohol.name} className={styles.image} />
//         <div className={styles.details}>
//           <h1>{alcohol.name}</h1>
//           <p className={styles.price}>{alcohol.price} –≥—Ä–Ω</p>
//           <p className={styles.volume}>–û–±—ä–µ–º: {alcohol.volume}</p>
//           {/* === –ö–ù–û–ü–ö–ê –ö–û–†–ó–ò–ù–´ === */}
//           <button
//             className={styles.addToCart}
//             onClick={handleAddToBasket}
//           >
//             –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
//           </button>
//         </div>
//       </div>
//       <h2>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h2>
//       <div className={styles.characteristics}>
//         {characteristics.map(([key, value]) => (
//           <p key={key}>
//             <strong>{fieldVerbose[key]}:</strong> {value}
//           </p>
//         ))}
//       </div>
//       <h2>–û—Ç–∑—ã–≤—ã</h2>
//       <div className={styles.reviews}>
//         {latestReviews.map((review) => (
//           <div key={review.id} className={styles.review}>
//             <div className={styles.userWithRating}>
//               {typeof review.author === "object" && review.author !== null && "avatar" in review.author && review.author.avatar ? (
//                 <img
//                   src={review.author.avatar}
//                   alt={review.author.nickname}
//                   className={styles.avatar}
//                 />
//               ) : (
//                 <span className={styles.userIcon}>üë§</span>
//               )}

//               <div>
//                 <p className={styles.userName}>
//                   {typeof review.author === "object" && review.author !== null && "nickname" in review.author
//                     ? review.author.nickname
//                     : review.author}
//                 </p>
//                 {renderStars(review.rate)}
//               </div>

//               {currentUser && typeof review.author === "object" &&
//                 review.author.nickname === currentUser.nickname && (
//                 <button className={styles.deleteBtn} onClick={() => handleDelete(review.id)}>
//                   –£–¥–∞–ª–∏—Ç—å
//                 </button>
//               )}
//             </div>
//             <div className={styles.reviewContent}>
//               <p className={styles.reviewText}>{review.text}</p>
//               <p className={styles.reviewDate}>{new Date(review.created_at).toLocaleString()}</p>
//             </div>
//           </div>
//         ))}
//       </div>
//       <div className={styles.reviewButtons}>
//         <button onClick={() => navigate(
//           `/${type}/${slug}/send-review`,
//           { state: { alcohol, type } }
//         )}>
//           –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
//         </button>
//         <button onClick={() => navigate(`/${type}/${slug}/reviews`, { state: { content_type, object_id: alcohol.id } })}>–í—Å–µ –æ—Ç–∑—ã–≤—ã</button>
//       </div>
//     </div>
//   );
// };

// export default AlcoholItem;

























